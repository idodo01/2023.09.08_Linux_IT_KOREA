1. tzslect : 시간 변경(도시 변경)
2. sudo dpkg-reconfigure tzdata : 시간변경(타임)
3. history : 본인이 입력했던 모든 명령어를 보여준다.(제대로 실행되는 것만)

4 . 디렉토리 (Directory) : 파일/디렉토리를 담을 수 있는 공간. 폴더(Folder)라고 부르지만 리눅스에서는 디렉토리라고 부른다.

5. 홈 디렉토리(Home Directory) : 로그인한 사용자의 "내 문서" 같은 느낌이다.
로그인한 사용자의 이름에 따라 경로가 달라지고 경로는 "/home/ <사용자 이름>/" 되어있다. 주로 물결표(~)로 축약하여 사용한다.

6. 루트(root) 디렉토리 : 최상위 디렉토리. 레터링을 통한 파티션 구분이 있는 윈도우와 달리, 우분투에서는 그런 부분이 없음으로 루트 디렉토리 보다 상위 디렉토리는 존재하지 않는다. 경로는 항상 "/"이며, 이는 절대경로(Absolute Path) 라고 부른다.

	/ : root 폴더를 뜻한다 (/root/home 이렇게 되어있으면 처음의 /는 root를 뜻하지만 그 다음의 /는 경로를 뜻하게 된다.)
	/bin : (시스템 구동에 필요한) 실행 파일들이 위치하고 있다.
	/boot : 커널(Kernal) 이미지 파일 및 부팅 정보 등이 위치하고 있다.
	/dev : 연결 된 장치(Device) 정보가 위치하고 있다.
	/etc : 시스템 및 일반 패키지의 설정 파일 등이 위치하고 있다.
	/home : 사용자 계정 별 홈 디렉토리를 포함하고 있다.
	/media : CD나 USB등 외부 저장장치를 이용하기위해 존재한다.
	/mnt : 마운트(mount). CD나 DVD 등 외부 저장장치를 수동으로 이용하기 위해 존재한다.(오래됨)
	/root : root 계정의 홈디렉토리 (/home/root)아님
	/sbin : root계정으로만 실행할 수 있는 실행 파일들이 위치하고 있다.
	/sys : 커널(kernel)정보가 들어가 있다.
	/tmp : 운영체제 구동중에 발생하는 임시 파일 이 저장된다. 부팅시 내부 내용이 초기화된다.
	/usr : 일반 실행 파일이 위치한다. 라이브러리나 헤더등 
	/var : 일반 데이터 파일 및 로그가 저장되는곳.


4. 절대 경로 (Absolute Path) : 루트 디렉토리 부터 명시한 경로 "/var/www/html" 및 "/etc/ssh"등은 절대 경로이다.

5. 상대 경로 (Relative Path) : 슬래쉬(/)로 시작하지 않는 경로. 현재 작업 중인 위치를 기준으로 풀이한다.

6. 현재 디렉토리(Current Directory) : 마침표(.) 특수기호는 항상 현재 디렉토리를 가르킨다.

7. 상위 디렉토리(Parent Directory) : 마침표 두개(..) 특수기호는 항상 상위 디렉토리를 가리킨다.
가령 "cd.."명령어는 작업 디렉토리의 위치를 현재 디렉토리의 상위 디렉토리로 변경한다. 현재 작업 디렉토리가 "~"일 때, "cd .."명령어를 실행하면 작업 디렉토리가 "/home"으로 변경된다.

8. CD(Change Directory) 명령어 : 현재 작업 디렉토리를 변경하기 위해 사용한다. "cd <원하는 경로>" 방식으로 사용한다.

9. PWD : 현재 작업 디렉토리의 (절대) 경로를 출력한다.

10 Man(Manual) : 명령어 : (지원하는 경우에 한함.) 다른 명령어의 메뉴얼을 조회한다. "man <명령어>"
방식으로 사용한다 		ex) "man ls"

11. LS(list) 명령어 : 어떠한 디렉토리 내부의 파일 및 디렉토리 목록을 표시하기 위해 사용한다.
"ls <경로?>" 방식으로 사용. 단 <경로>가 생략될 경우 현재 작업 디렉토리를 기준으로 한다.

 ls -a : 파일 혹은 디렉토리의 이름이 마침표(.)로 시작하는 숨김 상태여도 표시한다.
 ls -l : 목록의 단순 나열이 아닌 표(Table)로 정리하여 출력한다.
 ls -R : 명령 대상이 되는 디렉토리의 내용 뿐 아니라 이가 가지는 디렉토리 혹은 그 아래의 모든 내용까지 표시한다.

 12. clear : 창을 깨끗하게 해준다. 

 13. mkdir(Make Directory) 명령어 : 디렉토리를 만들기 위해 사용한다 "mkdir <디렉토리 경로>" 방식으로 사용한다.

 14. rmdir(Remove Directory) 명령어 : 비어있는 디렉토리를 삭제하기 위해 사용한다. "rmdir <디렉토리 경로>" 방식으로 사용한다.

 15. RM(Remove) 명령어 : 파일 혹인 디렉토리를 삭제하기 위해 사용한다. "rm < 매개변수 ?> <경로|패턴>" 방식으로 사용.

 ex ) "rm -rf*"등

 -f : 대상으로 하는 경로나 패턴에 일치하는 파일이나 디렉토리가 없다고 하더라도 경고나 오류를 표시하지 않고 무시한다.
 -r : 만약 대상으로 하는 디렉토리가 비어있지 않다면 해당 디렉토리의 내용부터 삭제한 뒤 해당 디렉토리를 삭제한다.
 
 16. CP(Copy) 명령어 : 파일 혹은 디렉토리를 다른 위치로 복사하기 위해 사용한다.
 * 사용 패턴 *
 cp <대상 파일> <붙여놓고자 하는 파일 경로>
  -> cp <a> <b> b에서 a파일이 b파일경로로 복사된다.
 cp <대상파일> <붙여놓고자 하는 디렉토리 경로>
  -> cp <a> <b> 에서 a파일(들)이 b디렉토리로 복사된다.

 17. MV(Move) 명령어 : 파일 혹은 디렉토리의 이름을 변경하거나 다른 위치로 이동하기 위해 사용한다.
 * 사용 패턴 * 
 mv <대상파일> <이동하고자 하는 파일경로>
 -> mv <a> <b> a파일이  b파일로 이동한다.
 mv <대상파일> <붙여놓고자 하는 디렉토리 경로.
 -> mv <a> <b> a파일이 b 디렉토리로 이동한다.

 18. touch : 파일을 만드는 명령어

 19. nano : 편집기 명령어 ( 리눅스에서의 ^표시 : ctrl 을 뜻한다.)
  
 20.  tail 명령어 : 파일의 뒷 부분을 출력하기 위해 사용한다. "tail <매개변수?> <파일경로>"방식으로 사용.

 tail -n 또는 --lines : 보여줄 라인 수를 지정한다. 예를 들어 -n 10은 파일의 마지막 10줄을 보여준다.

 tail -f 또는 --follow : 파일의 변화를 실시간으로 모니터링하며, 내용이 추가될 때마다 업데이트 한다.

 tail -q 또는 --quiet : 파일 이름을 보여주지 않는다. 주로 여러 파일을 모니터링 할 때 사용된다.

 21 권한 : 특정 대상에 대한 특정 권한의 부여 및 횟수는 다음과 같다. "<대상> <부여|회수|설정><권한..>
 * 대상 *
 소유자 : u
 소유 그룹 : g
 기타 : o
 * 부여|회수  *
 부여 : +
 회수 : -
 * 권한 *
 읽기 : r
 쓰기 : w
 실행 : x

 22 8진법 권한(Octal Mode) : 세 주체에 대한 권한을 8진법을 이용하여 세 자리로 표현하는 방식. 

 0 : 권한없음.
 1 : 실행 x
 2 : 쓰기 w
 3 : (실행 + 쓰기) wx
 4 : 읽기 r
 5 ( 1 + 4 , 실행 + 읽기) r-x
 6 ( 2 + 4 , 쓰기 + 읽기) rw-
 7 ( 1 +2 + 4, 실행 + 쓰기 + 읽기 , 모든권한) rwx

 23 echo

 24 cat

 25 sudo

 26. 스냅샷 : 복구 시켜준다

 27. sudo apt update : 시스템 패키지 관리자인 APT(Advanced Package Tool)을 통해 패키지 정상소의 업데이트된 목록을 가져오는 명령어이다.

 1. 로컬 패키지 목록 업데이트 : 현재 시스템에 설치된 패키지 목록을 업데이트 하여 새로운 패키지 정보를 반영한다.

 2. 패키지 저장소 업데이트 : 패키지 저장소는 패키지 관리자가 패키지를 다운로드 하고 설치할 수 있는 원격 서버이다.  sudo apt update는 이러한 저장소에서 최신 패키지 정보를 다운로드하여 로컬 패키지 목록과 동기화 한다.

 
 28. sudo apt upgrade : Debian 계열의 linux 시스템에서 사용되는 APT 패키지 관리자의 명령어 중 하나이다. 설치된 패키지를 최신 버전으로 업그레이드 하는 역활을 한다. 

 1. 시스템에 설치된 모든 패키지를 최신 버전으로 업그레이드 한다. 설치된 패키지 중에서 새로운 버전이 나왔을 경우 이를 업데이트하여 시스템을 최신 상태로 유지하는데 사용된다.

 2. 패키지 업그레드 중에 다른 패키지와의 의존성을 고려하여 업그레이드 될 패키지와 그에 필요한 다른 패키지도 함께 업그레이드 된다. 

 3. sudo apt upgrade 명령어를 주기적으로 실해아면 시스템에 설치된 패키지를 최신 상태로 유지하고, 보안 업그레이드 및 개선 사항을 적용시킬 수 있다. 

 29 -y : 만약에 실행할까 말까 라는 문구가 뜨게되면 무조건적으로 하겠다 라는 표시이다. 

 ex) sudo apt upgrade -y : 업그레드를 시키는데 무조건적으로 yes다 라고 인식하게 된다.

 30 . sudo apt install net-tools : 네트워크 관련 유틸리티를 설치하는 명령어이다. 

 ifconfig : 네트워크 인터페이스 설정을 확인하고 구성하는데 사용된다.

 netstat : 네트워크 연결 및 라우팅 테이블과 관련된 정보를 표시하는데 사용된다.

 arp : ARP (Address Resolution Protocol) 테이블을 보고 관리하는데 사용된다.

 route : 시스템의 라우팅 테이블을 표시하고 관리하는데 사용된다.

 31. 사용자와 그룹

 리눅스는 다중 사용자 시스템(Multi-User-System) 이다.
 기본적으로  root라는 이름을 가진 슈퍼유저(Superuser) 가 있으며, 모든 작업을 할 수 있는 권한이 있다.
 모든 사용자는 하나 이상의 그룹에 소속 되어 있다.
 모든 사용자는 /etc/passwd 파일에 정의되어 있다.
 모든 사용자의 비밀번호는 /etc/shadow 파일에 정의되어 있다.

 user:x:1000:1000:user,,,:/home/user:/bin/bash : 

 1. user : 사용자이름. 사용자의 식별자로 사용되며, 사용자가 시스템에 로그인할 때 사용하는 이름이다. 

 2. x : 사용자 암호 . 리눅스 시스템에서 실제 사용자 암호는 /etc/shadow 파일에 저장되어 있다. 일반적으로는 암호 자체를 직접 나타내지 않는다. 

 3. 1000 : 사용자 ID (User ID) : 사용자를 고유하게 식별하는 숫자이다. 시스템에서 사용자를 식별할 때 사용된다.

 4. 1000 : 그룹 ID (Group ID) : 사용자가 속한 기본 그룹을 식별하는 숫자이다. 그룹 ID는 중복이 가능하다(중첩 가능)

 5. user,,, : 사용자 정보 : 사용자에 대한 추가 정보나 주석을 담을 수 있다. 쉼표로 되어이쓴ㄴ 경우 주석이 비어있거나 구분된 값이 없다라고 해석하면 된다.

 6. /home/user : 홈 디렉토리 경로 : 사용자의 홈 디렉터리 경로를 나타낸다. 홈 디렉터리는 사용자가 로그인하면 기본 작업 디렉터리로 사용되며, 사용자의 파일과 설정이 저장되는 곳이다. 

 7. /bin/bash :  로그인 쉘(Login Shell) : 로그인할 때 실행되는 기본 로그인 쉘의 경로를 나타낸다. /bin/bash 라는 쉘을 이용해 로그인할 하였다고 생각하면 된다.

 user:$5$Sv6HZzhKa1huyRAh$lQi/lJYtsISz8hQy.tZgZj.vNSN8HkuDFjiaIDIk0H4:19613:0:99999:7:::

 1. user : 사용자 계정

 naver . 아이디 user 비밀번호 1234 

 웹개발 :  userid = 그대로 나둠.

 2. 암호 해시(Password Hash) : $5$Sv6HZzhKa1huyRAh$lQi/lJYtsISz8hQy.tZgZj.vNSN8HkuDFjiaIDIk0H4 
  sha-256
 사용자의 실제 암호를 해시화한 결과이다. 암호는 실제로 이러한 형태로 저장되며, 해시화되었기 때문에 원본 암호를 볼 수 없다. 

 3. 19613 : 만들어진 시간(암호 변경 날짜) :  1970년 1월 1일 이후 경과한 일 수 로 표시한다. 

 4. 0 : 암호 변경 간격 : 암호를 변경해야 하는 간격을 나타낸다. "0"은 암호 변경을 강제하지 않는다.

 5. 99999 : 암호 만료 날짜 : 99999 : 암호가 만료되지 않음을 나타낸다.

 6. 7 : 암호 만료 전에 사용자에게 알림을 보내는 일수를 나타낸다. 암호 만료 7일전부터 알림이 표시된다.

 7. ::: : 기타 : 기타정보를 나타낸다. :::은 비어있거나 값을 가지고 있지 않음을 나타낸다.


 32. adduser : 새로운 사용자를 추가 ex) adduser (사용자 생성시 옵션 --uid (ID지정) --gid (그룹 지정) --home (홈 디렉터리 지정) --shell (쉘 지정)

 33. passwd : 사용자의 비밀번호를 저장하거나 변경.  ex) passwd user2

 34. usermod 사용자의 속성을 변경 ex) usermod --groups ubuntu newuser1 
     
      usermod : 사용자 계정 속성을 수정하는데 사용된다.
     --groups ubuntu newuwer1 : newuser1 사용자를 추가하려는 그룹을 지정한다. newuser1을 ubuntu 그룹에 추가하고자 한다.

 35. deluser(Delete user) : 사용자를 제거하기 위해 사용한다. "deluser <매개변수?> <사용자 이름>" 형식으로 사용한다.
 * 일부 매개변수 *
 --remove-home : 홈 디렉토리를 함께 삭제한다.
 --remove-all-files : 해당 사용자와 관련된 모든 파일을 함께 삭제한다. (하기전 백업은 해놓는게 좋다.)
						       -d(day) -y(year)
 36. chage 사용자의 암호를 주기적으로 변경하도록 설정 ex) chage -m(month) 2 newuser : chage(패스워드 변경 정책을 설정하는 명령어 -m(최소 패스워드 변경 기간을 설정) 2(패스워드를 변경 한 후 최소 2일동안은 다시 변경할 수 없다 라는 의미이다.)

 37. groups 현재 사용자가 속한 그룹을 보여준다. ex) groups user

 38. groupadd 새로운 그룹을 생성 ex) groupadd newgroup1

 -g : 그룹의 GID(Group Id)를 설정하는 옵션이다.

 39. groupmod : 그룹의 속성을 변경한다. ex) groupmod --new-name newgroup1 mygroup1

 40. groupdel : 그룹을 삭제한다. ex) groupdel newgroup2

 41. gpasswd : 그룹의 암호를 설정하거나 그룹의 관리를 수행.

 42. su : 아이디를 바꿀 수 있다. ex) su - : root계정 접속. , su user

 43. Chown (Change Ownership) : 파일이나 디렉토리의 소유자/소유그룹을 변경하기 위해 사용한다.
"chown <매개변수?> <소유자>:소유그룹> <파일 혹은 디렉토리..>" 형식으로 사용한다.

 44. Chmod(Change mode) : 파일이나 디렉토리에 대한 접근 권한을 변경하기 위해 사용한다. "chmod <매개변수?> <모드|8진법 모드>
 <대상 파일 혹은 디렉토리..> 형식으로 사용한다. 가령 "memo"파일 소유자에게 쓰기 권한을 보여하기 위해서는 다음과 같이 명령한다.

 "chmod u + rw,g +r memo>

 45. su - : root로 가는 명령어 이다. (만약 아무것도 안건드렸는데 su: Authentication failure 이 화면이 뜬다.) : root에 대한 비밀번호가 설정이 안되있기 때문에 root에 대한 비밀번호 설정을 해주어야 한다. (sudo passwd root) 

 46. vi : 편집기 명령어이다.

 47. sudo 권한 부여방법 : 먼저 root계정으로 접속한다. -> /etc 디렉터리의 sudoers파일을 편집해 admin계정 밑에다 추가해놓으면 된다.

 48. 8진법권한 : 8진법으로도 권한을 변경할 수 있다. ex) chmod 775 linu.txt
						     
 ===========================================================

 네트워크 관련 필수 개념

 49 : TCP/IP

 컴퓨터끼리 네트워크 상으로 의사소통을 하는 "프로토콜"중 가장 널리 사용되는 프로토콜의 한 종류

 50 : 호스트 이름 (Hostname)과 도메인 이름(Domain name)
 호스트 이름은 각각의 컴퓨터에 지정된 이름 
 도메인 이름은(또는 도메인 주소)는 naver.com과 같은 형식

 51 : IP주소
 각 컴퓨터의 랜카드에 부여되는 중복되지 않은 유일한 주소
 4바이트로 이루어져 있다. 각 자리는 0 ~ 255 까지의 숫자
 예) Server의 ip주소는 192.168.111.1~254

 52 : 네트워크 주소
 같은 네트워크에 속해 있는 공통된 주소 (인트라넷)
 
 53 : 브로드캐스트(Broadcast) 주소

 내부 네트워크의 모든 컴퓨터가 듣게 되는 주소
 현재 주소의 제일 끝자리를 255로 바꾼 주소 (C클래스)

 54 : 게이트웨이(Gateway), 라우터(Router)
 라우터 = 게이트웨이
 네트워크 간에 데이터를 전송하는 컴퓨터 또는 장비
 
 55 : 넷 마스크(Netmask)
 넷마스크 : 네트워크의 규모를 결정

 56 : DNS(Domain Name System) : 서버 주소
 URL을 해당 컴퓨터의 IP 주소로 변환해주는 서버
 설정 파일은 /etc/resolv.conf

 --------------------------------------------------------------------

 리눅스에서의 네트워크 장치 이름

 57 : 우분투는 랜카드를 ens32 또는 ens33으로 할당

 ifconfig ens32 또는 ens33 -> 네트워크 설정 정보를 출력
 ifdown ens32 또는 ens33 -> 네트워크 장치를 정지
 ifup ens32 또는 ens33 -> 네트워크 장치를 가동

 58 : nm-connection-editor : 네트워크와 관련된 대부분의 작업을 이 명령에서 수행

 59 : 127.0.0.53 : 내부아이피 (window의 localhost 같은 개념이다.)

 60 : systemctl <start/stop/restart/status> networking : 네트워크의 설정을 변경한 후에, 변경된 내용을 시스템에 적용시키는 명령어. 

 61 : nslookup : DNS 서버의 작동을 테스트하는 명령어

 62 : ping : <ip주소 또는 url> : 해당 컴퓨터가 네트워크상에서 응답하는지를 테스트하는 명령어

 cat /etc/NetworkManager/system-connections/안의 파일 : 네트워크설정이 잘되있는지 확인하는 명령어

 nano /etc/resolv.conf : dns가 설정되어있는 파일

 nameserver 8.8.8.8 : 구글에서 제공해주는 서버 (주의점 : 컴퓨터를 재부팅하면 원위치된다.)

 ----------------------------------------------------------------------------

 63 : pipe : 두 개의 프로그램을 연결해 주는 연결통로의 의미
	"|" 문자를 사용한다 ex) ls -l /etc | more

 64 : 필터(filter) : 필요한 것만 걸러주는 명령어

	grep, tail, wc, sort, awk, sed 등
	주로 파이프와 같이 사용 ex) ps -ef | grep bash (ps -ef  : 현재 실행중인 모든 프로세스를 나열하는 명령어이다.)
	ps : 프로세스 스냅샷을 제공한다.
	-ef 모든 프로세스를 상세하게 나열하도록 지시한다.
	grep bash : 주어진 텍스트에서 bash라는 문자열을 포함하는 프로세스를 찾아서 출력한다.

 65 : 리디렉션,리다이렉션 (redirection)

 표준 입출력의 방향을 바꿔준다.
 ex) ls -l > list.txt

 > : 출력 리다이렉션 : '>' 기호를 사용하여 명령의 표준 출력(일반적으로 화면에 출력되는 내용)을 파일로 옮길 수 있다.
 만약에 ls -l > list.txt명령어를 쓰게 되면 list.txt로 저장은되나 파일이 이미 존재한다면 덮어쓰게 된다.

 >> : 출력 리다이렉션 : 내용은 똑같다. 다만 파일이 이미 존재하는 경우 기존 내용을 유지하면서 출력을 추가한다.

 < : 입력 리다이렉션 : 파일에서 데이터를 읽어 명령의 표준 입력으로 제공한다. 
 ex) my_prgram < input.txt : input.txt파일의 내용을 my_program 명령의 입력으로 전달한다.


-------------------------------------------------------------------------------------------------------------

66.  프로세스, 데몬

정의 : 하드디스크에 저장된 실행코드(프로그램)이, 메모리에 로딩되어 활성화 한것.

포그라운드 프로세스 : 실행하면 화면에 나타나서 사용자와 상호작용을 하는 프로세스(대부분의 응용 프로그램)

백그라운드 프로세스 : 실행은 되었지만, 화면에는 나타나지않고 실행되는 프로세스(백신 프로그램, 서버 데몬 등)

프로세스 번호 : (각각의 프로세스에 할당된 고유번호(임의로 매겨진다))

작업 번호 : 현재 실행되고 있는 백그라운드 프로세스의 순차번호

부모 프로세스와 자식 프로세스 : 

모든 프로세스는 부모 프로세스를 가지고 있다.
부모 프로세스를 kill 하면 자식프로세스도 자동으로 kill 된다.

--------------------------------------------------------------------------------

 67. ps : 현재 프로세스의 상태를 확인하는 명령어 "ps -ef | grep <프로세스 이름>"을 주로 사용한다.

 68. kill : 프로세스를 강제로 종료하는 명령어 ex) "kill -9 <프로세스 번호>"

 69. pstree :  부모 프로세스와 자식 프로세스의 관계를 트리 형태로 보여준다.


---------------------------------------------------------------------------------

 서비스와 소켓
 
 70 : 서비스 : 시스템과 독자적으로 구동되어 제공하는 프로세스를 말한다. ex ) 웹 서버, DB서버, FTP서버 등이 있다.

 실행종료는 대체적으로 'systemctl start/stop/restart 서비스이름' 형식으로 사용한다.

 서비스의 실행 스크립트 파일은 /lib/systemd/system/ 디렉터리에 서비스이름.service라는 이름으로 확인 할 수 있다.

 부팅과 동시에 서비스의 자동 실행 여부를 지정할 수 있는데 터미널에서 systemctl list-unit-files 명령을 실행하면 사용(enabled)와 사용안함 (disabled)을 확인할 수 있다.

 71. 소켓 : 서비스는 항상 가동되지만, 소켓은 외부에서 특정 서비스를 요청할 경우에 systemmd가 구동된다. 그리고 요청이 끝나면 소켓도 종료된다. 그래서 소켓으로 설정된 서비스를 요청할 때는 처음 연결되는 시간이 앞에서 설명한 서비스에 비교했을때는 시간이 좀 더 걸릴 수 있다. 왜냐하면 systemd가 서비스를 새로 구동하는데 시간이 소요되기 때문이다.

 소켓과 관련된 스크립트 파일은 /lib/systemd/system/ 디렉터리에 소켓이름.socket 이름으로 존재한다.

--------------------------------------------------------------------------------------------------------------

 웹 배포 

 72. 아파치 HTTP 서버 2.0 (Apache 2.0) : 오픈 소스 웹 서버 소프트웨어로, 리눅스 운영체제와 함께 많이 사용된다.

 특징 및 기능.

 1. 아파치 2.0은 멀티 프로세스 아키텍처를 사용한다. 여러명이 동시에 요청이 들어와도 처리할 수 있다.
 
 2. 멀티 쓰레딩을 지원하여 효율적인 자원 사용이 가능하다.

 3. 다중 도메인 혹은 서브도메인을 하나의 서버에서 관리할 수 있는 가상 호스팅을 지원한다.

 4. 로그 기록 : 다양한 형식의 로그를 생성하여 웹 서버의 활동을 추적하고 모니터링 할 수 있다.

 5. 다양한 모듈을 통해서 기능을 확장할 수 있다. PHP,SSL,TLS 지원, 프록시 서버, URL 리다이렉션 등을 추가할 수 있다.

 6. 다양한 환경에서 커스터마이징이 가능하다.

 7. apt-get install apache2 : 아파치2.0 HTTP apt를 가져온다.

 8. 아파치 페이지(index.html) 파일의 경로는 /var/www/html 디렉터리에 있다.

-------------------------------------------------------------------------------------------------------

 1. AWS는 클라우드 컴퓨팅(Cloud Computing) 이다 : 인터넷을 통해 컴퓨팅 리소스와 IT 서비스를 제공한다. 서버,스토리지,데이터베이스,네트워크,분석등을 제공해 준다.

 2. EC2(Elastic COmput Cloud) : 가상 서버를 제공하는 AWS 서비스이다. 다양한 인스턴스 유형과 운영체제로 구성할 수 있다. 이를 통해 웹 애플리케이션 호스팅, 데이베이스 서버 실행, 머신러닝 훈련등 다양한 컴퓨팅 작업을 수행할 수 있다.

 3. S3(Simple Strage Service) : 객체 스토리지 서비스로, 파일 및 데이터를 안전하게 저장하고 검색할 수 있도록 도와준다. 전 세계 어디에서나 접근 가능하다.

 4. RDS : RDS는 관계형 데이터 베이스를 호스팅하고 관리하는 서비스이다. MySQL, Oracle, SQL Server등 다양한 데이터베이스 엔진을 지원한다.

 73 : .pem

 주로 공개 키와 인증서 파일의 확장자로 사용하는 파일형식이다. Base64로 인코딩된 데이터와 함께 인코딩된 메타데이터를 포함한다.

 .pem 파일은 주로 다음과 같은 용도로 사용된다.

 1. SSL/TLS 인증서 파일. 웹 서버와 클라이언트 간의 안전한 통신을 제공하기 위해 사용한다. .pem파일은 공개 키와 개인 키, 그리고 디지털 서명된 인증서 정보를 포함할 수 있다.

 2. SSH 키 파일 : .pem 파일은 SSH(Secure Shell)프로토콜을 사용하여 원격 서버에 로그인하기 위한 키 페어(공개 키 및 개인 키)를 저장하는데 사용한다.

 3. OpennVPN 인증서 및 키 파일 : 가상 사설명(VPN)솔루션에서 .pem파일은 클라이언트 및 서버 인증을 위해 사용한다. 

 4. 암호화된 텍스트 파일 : .pem 파일은 텍스트 파일을 암호화하여 안전하게 저장하거나 전송할 수 있다.

 74. SSH : 네트워크 통신을 안전하게 제공하는 프로토콜과 그 프로토콜을 구현하는 소프트웨어의 이름이다.

 리눅스에서 보안설정은 대체적으로 3중 보안을 사용한다.

 1. 방화벽 보안
 2. AWS의 보안
 3. 서비스 파일의 보안
 
 0.0.0.0/0 : 모든 네트워크 접속이 가능하다.

 75. Ubuntu UFW : Ubuntu 리눅스 운영 체제에서 사용되는 간단한 방화벽 설정 도구이다.

 방화벽 : 컴퓨터와 네트워크 간의 트래픽을 제어하는 보안 장치이다. 이를 통해 악의적인 접속을 차단하고 시스템의 보안을 강화할 수 있다.

 설치 : Ubuntu에서 기본적으로 제공되므로 별도의 설치가 필요하지 않는다.

 만약에 설치를 해야하는 경우 : sudo apt install ufw : 방화벽 기능을 설치한다.

 주요기능 : 규칙을 추가할 수 있다. ex) 80번 포트는 안되고 99번 포트만 가능해.
	  규칙 삭제도 가능하다.
	  규칙 확인도 가능하다.
	  기본 정책 설정도 가능하다.
	  방화벽 활동을 로그로 남길 수 있다.

 76 : sudo ufw enable : 방화벽 활성화

 77 : sudo ufw status : 방화벽룰(상태창)을 보여준다.

 78 : sudo ufw default deny : 기본적으로 모든 네트워크 연결을 차단하는 명령어

 79 : sudo ufw allo : 방화벽 룰을 추가하는 명령어 ex) sudo ufw allow from 0.0.0.0/0 to any port 22 

 80 : sudo ufw delete : 방화벽 룰 삭제 ex) sudo ufw delete 1

 81 : sudo ufw status numbered : 해당 ufw 방화벽 번호까지 나오게된다. 

 82 : 우분투 자체의 내부파일 설정

 경로는 /etc/ssh/sshd_config 파일이다.

 83 . ssh,sshd : ubuntu자체의 서버 구동시스템 

 84. sudo service ssh restart, sudo service sshd restart : 서버 재시작

 85 . 아파치2의 설정파일은 /etc/apache2/ports.conf 파일이다.

 86. sudo service apache2 restart : 아파치 재시작


------------------------------------------------------------------------------

 87. : aws에서 탄력적 ip를 써야하는 이유

  1. 고정된 공인 IP 주소 : 탄력적 IP는 고정된 공인 IP주소를 제공한다. 인스턴스나 서비스의 공인 IP주소를 변경하지 않고 계속 사용할 수 있음을 의미한다. 

  2. IP 주소 변경 방지. : 일반적으로 EC2 인스턴스를 시작하면 공인 IP 주소가 동적으로 할당된다. 인스턴스를 중지하고 다시 시작하면 IP 주소가 변경될 수 있다. 탄력적   IP를 사용하면 IP주소 변경을 방지할 수 있고, 통신이 중단되지 않도록 한다. 

 3. 지역 간 이동 : 탄력적 IP를 사용하면 AWS 리전(서버) 간에 인스턴스를 이동할 때 IP 주소를 그대로 유지할 수 있다. 

 4. 비용 효율성 : 탄력적 IP를 사용하는 경우, 인스턴스를 중지하더라도 IP주소를 유지할 수 있으므로 다시 시작할 때 추가 비용이 들지 않는다. 


------------------------------------------------------------------------------
 88. useradd로 사용자를 만들 시 

 sudo useradd -u 501 -g managements -m -d /data/home/muser1 -s /bin/bash muser1

 sudo : 관리자 권한
 useradd : 사용자 추가 명령어
 -u 501 : 사용자의 UID(user id)를 501로 설정하는 옵션이다.
 -g managements : 사용자를 추가할 때 사용자의 기본그룹을 설정하는 옵션이다.
 -m 사용자의 홈 디렉터리를 생성하도록 하는 옵션이다.
 -d /data/home/muser1 ; 사용자의 홈 디렉터리 경로를 설정하는 옵션이다.
 -s /bin/bash : 사용자의 로그인 셸을 /bin/bash로 설정하는 옵션이다. 사용자가 명령어를 입력하고 실행할 때 사용할 로그인 셸을 지정한다.
 muser1 : 생성할 사용자의 이름이다.

 89. adduser 로 사용자를 만들 시
 
 sudo adduser --home /data/home/suser1 --ingroup sales --shell /bin/bash --uid 504 suser1


 90. 로그인 셸(Login Shell) : 사용자가 시스템에 로그인할 대 실행되는 프로그램 또는 명령어이다. 로그인 셸은 사용자가 컴퓨터에 로그인한 후 명령어를 입력하고 실행되는 환경을 제공해 사용자가 시스템 간의 상호작용을 가능하게 한다. 

 1. /bin/bash : Unix및 Linux 시스템에서 기본 로그인 셸로 사용된다.

 2. /bin/sh : 리눅스 및 다른 Unix 시스템에서 사용될 수 있다.

 3. /bin/zsh : 강력한 명령어 완성 및 스크립팅 기능을 제공한다.

 4. /bin/fish : 사용하기 쉬운 대화형 환경을 제공한다.

 
 ------------------------------------------------------------------------------

 sshd_config : 서버의 설정 파일 /etc/ssh/sshd_config 경로에 위치해 있다.

 Port : 포트번호 설정

 ListenAddress 0.0.0.0 : SSH서버에서 Listen 할 로컬 호스트 주소를 설정 하는 것이다. 여러 개의 IP를 사용중일 대 특정 IP로 SSH 접속이 가능하도록 설정하는 옵션이다. 0.0.0.0은 모든 네트워크를 의미한다. 사용하고자 하는 특정 IP가 있다면 0.0.0.0을 대신 적으면 된다.

 HostKey : 시스템이 사용할 키 파일의 위치이다. 

 LoginGraceTime : 접속 후 인증 완료를 위해 허용되는 시간

 PermitRootLogin : root 사용자의 SSH접속 허용 여부. 보안을 위해 "no"로 설정하는것이 권장된다.

 StrictModes : yes로 설정될 경우 사용자의 홈 디렉토리나 .ssh디렉토리 , .ssh/authorized_keys 파일의 권한을 검사한다.

 PasswordAuthentication : 패스워드 인증 허용 여부.


 ------------------------------------------------------------------------------

 AWS의 프리티어

 AWS는 두 가지 종류의 프리 티어(체험) 제공

 1. AWS의 계정을 처음 생성시 프리 티어로 체험 가능하다.
 예) 최초 12개월동안 t2/t3.micro EC2 750시간 무료
      최초 12개월 S3 5GB 12개월 무료
      최초 12개월 db.t2.micro, db.t3.micro,db.t4.micro RDS 무료

 항상 무료 사용 가능
  Lambda 는 월 1백만건 무료
  DynamoDB 25GB 까지 무료
  CloudFront는 월 1TB전송, HTTP/HTTPS 1천만건 무료

 2. 아무리 프리터라도 제한이 존재.
    다양한 이유로 요금 청구 가능.
    예: EC2의 프로비전 후 정리하지 않은 경우(안꺼놓고 간다거나)

 3. 이외에 해킹 및 보안 사고 때문에 비용이 발생하는경우.
 EC2/SageMaker 등을 탈취해서 비트코인 채굴 등 

----------------------------------------------------------------

 AWS의 보안 시스템.

 1. MFA(otp)

 2. AWSBudgets

 AWS에서 발생한 비용과 사용량을 추적하고 대응하는 서비스
 사용자가 지정한 비용 이상으로 비용이 발생 시 대응 가능 : SNS수신 가능 = Lambda를 활용해 다양한 대응 가능
 태그별 보고서 작성 가능

 3. AWS User Notification

 AWS 사용자 알림 : 이벤트, 경보, 상태 변경 등 AWS 서비스에서의 모든 알림을 설정하고 볼 수 있도록 해 준다.
 AWS의 각 서비스의 다양한 이벤트의 알림을 받아볼 수 있는 서비스

 ex1) : EC2 인스턴스의 상태 변경
 ex2) : RDS의 파라미터 그룹 변경

 3가지 채널로 알람 전달

 1. Email
 2. Mobile Device(AWS Console App)
 3. AWS Chatbot (예:Slack)
 

----------------------------------------------------------------

 91. PowerShell :마이크로소프트에서 개발한 커맨드 라인 셸 및 스크립트 언어이다. 시스템관리자, 네트워크 관리자, 개발자 및 IT 전문가들이 서비스를 관리하고 자동화하는데 유용한 강력한 도구이다. PowerShell은 많은 면에서 cmd보다 상위에 위치한다. PowerShell은 특히 복잡하고 반복적인 작업, 시스템 관리, 자동화 및 스크립팅 작업에 적합하다.

----------------------------------------------------------------
 
 92. TCP : 컴퓨터 네트워크에서 데이터를 안정적으로 전송하기 위한 프로토콜 중 하나이다. (웹 브라우징,  이메일 , 파일 전송)

 프로토콜 : 컴퓨터 네트워크와 통신 시스템에서 데이터를 교환하고 통신하기 위한 규칙과 규약의 집합을 나타낸다.

 IP : 컴퓨터 네트워크에서 패킷 스위칭과 라우팅을 담당하는 프로토콜이다. 인터넷의 기본적인 통신 규칙 중 하나이다.

 SMTP : 전자 메일을 전송하는데 사용되는 프로토콜이다.

 FTP : 파일을 서버와 클라이언트 간에 전송하는데 사용되며, 파일 공유와 다운로드에 활용된다.(SSH)


----------------------------------------------------------------

  Git, GitHub : 소프트웨어 개발과 협업에 필수적인 도구이다. 

 git : 버전 관리 시스템. 소프트웨어 개발자가 소스 코드의 변경 사항을 추적하고, 다른 개발자들과 협업하며, 이전 버전의 코드로 쉽게 돌아갈 수 있도록 도와준다.
 
 커밋(commit) : Git에서 변경 사항을 저장하는 작은 단위. 코드 변경 사항을 커밋하면 이전 상태로 다시 돌아갈 수 있다.

 브랜치(Branch) : 여러 작업을 병렬로 진행할 수 있게 해 주는것. 새로운 기능을 개발하거나 버그를 수정할 때 사용된다.

 병합(Merge) : 두 개 이상의 브랜치를 합치는 과정. 작업이 완료되면 주 브랜치에 변경 사항을 병합한다.

 원격 저장소(Remote Repository) : 코드를 인터넷 상의 서버에 저장하고, 여러 개발자가 함께 작업하고 변경 사항을 공유할 수 있는 곳



 GitHub : GitHub는 Git 저장소를 호스팅하고 협업을 위한 도구를 제공하는 웹 플랫폼이다. 소프트웨어 개발 프로젝트를 보다 쉽게 관리할 수 있다.

 레포지토리(Repository) : 프로젝트의 모든 파일과 이력이 저장되는 곳. 다른 개발자들과 함께 작업할 수 있다.

 풀 리퀘스트(Pull Request) : 코드 변경 사항을 다른 사람들에게 제안하고, 코드 리뷰 및 논의를 할 수 있는 요청. 변경 사항이 레포지토리 병합되기 전에 사용된다.

 이슈(Issue) : 버그, 기능추가, 작업 등을 추적하기 위한 토론과 추적 도구. 프로젝트의 진행 상황을 파악할 수 있다.

 커밋 히스토리(Commit History) : 모든 커밋과 변경 사항의 로그. 프로젝트의 발전 과정을 기록한다.

 ----------------------------------------------------------------------- 

 sudo apt install git : 깃 설치
 
 git --version : 깃의 버전을 확인한다.

 리눅스 환경에서 깃

 git init : 초기화( 새로운 프로젝트 디렉터리를 Git으로 관리하기 위해 사용된다.)

 git config --list : Git 설정 정보를 나열하는 명령어이다. 명령을 실행하면 Git 저장소나 Git 사용자 계정 전체 설정에 대한 모든 설정을 나열한다.

 git config --global user.name "username" : git 의 user(사용자)를 설정하는 명령어이다.

 git config --global user.email useremail : git의 user.mail(사용자의 메일)을 설정하는 명령어이다.

 git clone <repository_url> : 원격 저장소 복제 : GitHub에서 프로젝트를 복제할 때 사용되는 명령어이다.

 git add <file> : 파일 스테이징 : 변경사항을 커밋할 준비를 하는 단계이다. 변경된 파일을 스테이징 영역에 추가한다.

 git commit -m "커밋 메시지" 스테이징 영역에 있는 변경사항을 커밋하여 저장한다. 커밋 메시지는 변경 사항을 설정하는 메시지를 작성해야 한다.

 git status : 현재 상태 확인 : 작업 디렉토리의 현재 상태와 스테이징 영역의 상태를 확인한다.

 git log : 커밋 로그 확인 : 저장된 커밋 이력을 확인한다.

 ssh-keygen [옵션] : SSH 프로토콜을 사용하여 원격 서버에 안전하게 로그인하고 파일을 전송하는데 사용되는 공개 키 및 개인 키를 생성하는 도구이다.

 -t 옵션 : 사용할 키 유형을 지정한다. 가장 일반적으로 사용되는 유형은 RSA와 ECDSA이다. -t rsa 옵션을 이용하면 RSA 키를 생성할 수 있다.

 -b 옵션 : 비트 수를 지정하여 키의 강도를 조절한다. 보통 2048비트 또는 4096 비트 키가 사용된다.

 -c 옵션 : 주석(comment)를 추가하는 옵션으로 키에 설명을 추가할 수 있다.

 -f 옵션 : 생성된 키 파일의 경로와 이름을 지정한다. 기본적으로 ~/.ssh/id_rsa 로 저장된다.

 -N 옵션 : 키에 대한 암호를 설정하는 옵션이다. 암호를 사용하려면 이 옵션을 사용하고 키를 생성할 때 암호를 입력해야 한다.

 id_rsa, id_rsa.pub : .pub은 public의 약자. .pub 확장자가 있는 파일은 주로 공개 키다.(public key) 

 id_rsa는 비밀 키(private key) 파일이다. 
 
 git branch -m main : Git 저장소에서 현재 브랜치의 이름을 변경하는 명령어이다.

 git branch -m : 브랜치를 이동하거나 이름을 변경하는데 사용된다.

 git remote add orign : Git 저장소에 원격 리모트 저장소를 추가하는 명령어다. 원격 저장소를 연결하면 로컬 Git 저장소에서 원격 저장소로 데이터를 푸시(push) 풀(pull) 할 수 잇게 된다.

 git remote rm origin : remote(원격저장소) 삭제

 git push -u origin : Git에서 로컬 브랜치를 원격 저장소로 푸시(push)하면서 해당 브랜치를 원격 저장소의 기본 브랜치로 설정하는 명령어이다.

 - origin : 일반적으로 원격 저장소를 가리키는 이름으로 사용되는 별칭이다.

 git clone <github 주소> 입력 : 깃허브의 내용을 그대로 복사해온다. 
 
 git push origin +main : git push를 강제로 푸쉬해준다.

 

 





